// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.RecursiveHighlighter = (function() {

    RecursiveHighlighter.prototype.options = {
      highlightClass: 'highlight',
      highlightTag: 'span'
    };

    function RecursiveHighlighter(target, options) {
      if (options == null) {
        options = {};
      }
      this.$el = $(target);
      this.options = $.extend(this.options, options);
    }

    RecursiveHighlighter.prototype.containsSelection = function() {
      var $end, $start, containsEnd, containsStart, range;
      if (!this.selectionExists()) {
        return false;
      }
      range = this.getRange();
      $start = $(range.startContainer);
      $end = $(range.endContainer);
      containsStart = $start.parents().toArray().indexOf(this.$el[0]) !== -1;
      containsEnd = $end.parents().toArray().indexOf(this.$el[0]) !== -1;
      return containsStart && containsEnd;
    };

    RecursiveHighlighter.prototype.selectionExists = function() {
      if (this.getRange()) {
        return true;
      } else {
        return false;
      }
    };

    RecursiveHighlighter.prototype.getRange = function() {
      var selection;
      if (window.getSelection) {
        selection = window.getSelection();
        if (selection.rangeCount > 0) {
          return selection.getRangeAt(0);
        } else {
          return false;
        }
      } else if (document.selection) {
        return document.selection.createRange();
      }
    };

    RecursiveHighlighter.prototype.getRelativeSelectionBounds = function() {
      var $end, endOffset, range, startOffset;
      if (!this.containsSelection()) {
        return false;
      }
      range = this.getRange();
      $end = $(range.endContainer);
      startOffset = this.getNumCharactersUntil(range.startContainer) + range.startOffset;
      endOffset = this.getNumCharactersUntil(range.endContainer) + range.endOffset;
      return [startOffset, endOffset];
    };

    RecursiveHighlighter.prototype.getNumCharactersUntil = function(elm) {
      var numChars, success, _ref;
      _ref = this.recurseGetNumCharsUntil(this.$el, elm), numChars = _ref[0], success = _ref[1];
      return success && numChars;
    };

    RecursiveHighlighter.prototype.getFlattenedDomTree = function() {
      return this.recurseGetFlattenedDomTree([], this.$el);
    };

    RecursiveHighlighter.prototype.recurseGetFlattenedDomTree = function(previousFlattenedTree, currentNode) {
      var $currentNode, child, children, flattenedTree, _i, _len, _ref;
      flattenedTree = previousFlattenedTree.slice();
      $currentNode = $(currentNode);
      children = $currentNode.contents();
      if (children.length > 0) {
        _ref = children.toArray();
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          child = _ref[_i];
          flattenedTree = this.recurseGetFlattenedDomTree(flattenedTree, child);
        }
      } else {
        flattenedTree.push($currentNode[0]);
      }
      return flattenedTree;
    };

    RecursiveHighlighter.prototype.recurseGetNumCharsUntil = function(root, elm) {
      var $elm, $root, charOffset, child, children, found, numChars, _i, _len, _ref, _ref1;
      numChars = 0;
      $elm = $(elm);
      $root = $(root);
      if ($root[0] === $elm[0]) {
        return [0, true];
      } else {
        children = $root.contents();
        if (children.length > 0) {
          _ref = children.toArray();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _ref1 = this.recurseGetNumCharsUntil(child, elm), charOffset = _ref1[0], found = _ref1[1];
            numChars += charOffset;
            if (found) {
              return [numChars, true];
            }
          }
        } else {
          return [$root.text().length, false];
        }
      }
      return [numChars, false];
    };

    RecursiveHighlighter.prototype.markHighlight = function(relativeBounds) {
      var domTree, hlEnd, hlRange, hlStart, inserting, node, nodeEnd, nodeHlEnd, nodeHlStart, nodeLength, nodeRange, nodeStart, _i, _j, _k, _len, _results, _results1, _results2;
      domTree = this.getFlattenedDomTree();
      hlStart = relativeBounds[0];
      hlEnd = relativeBounds[1];
      hlRange = (function() {
        _results = [];
        for (var _i = hlStart; hlStart <= hlEnd ? _i <= hlEnd : _i >= hlEnd; hlStart <= hlEnd ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this);
      inserting = false;
      nodeStart = 0;
      _results1 = [];
      for (_j = 0, _len = domTree.length; _j < _len; _j++) {
        node = domTree[_j];
        nodeLength = $(node).text().length;
        nodeEnd = nodeLength + nodeStart;
        nodeRange = (function() {
          _results2 = [];
          for (var _k = nodeStart; nodeStart <= nodeEnd ? _k <= nodeEnd : _k >= nodeEnd; nodeStart <= nodeEnd ? _k++ : _k--){ _results2.push(_k); }
          return _results2;
        }).apply(this);
        if (__indexOf.call(hlRange, nodeStart) >= 0 || __indexOf.call(hlRange, nodeEnd) >= 0 || __indexOf.call(nodeRange, hlStart) >= 0 || __indexOf.call(nodeRange, hlEnd) >= 0) {
          nodeHlStart = Math.max(hlStart - nodeStart, 0);
          nodeHlEnd = Math.min(hlEnd - nodeStart, nodeLength);
          this.highlightInNode(node, [nodeHlStart, nodeHlEnd]);
        }
        _results1.push(nodeStart = nodeEnd);
      }
      return _results1;
    };

    RecursiveHighlighter.prototype.highlightInNode = function(node, bounds) {
      var $node, $tempDiv, content;
      $node = $(node);
      content = $node.text();
      content = content.slice(0, bounds[1]) + this.getHlEndTag() + content.slice(bounds[1]);
      content = content.slice(0, bounds[0]) + this.getHlStartTag() + content.slice(bounds[0]);
      if ($node[0].nodeType === 3) {
        $tempDiv = $('<div/>');
        $tempDiv.html(content);
        return $node.replaceWith($tempDiv.contents());
      } else {
        return $node.parent().html(content);
      }
    };

    RecursiveHighlighter.prototype.getHlStartTag = function() {
      return "<" + this.options.highlightTag + " class='" + this.options.highlightClass + "'>";
    };

    RecursiveHighlighter.prototype.getHlEndTag = function() {
      return "</" + this.options.highlightTag + ">";
    };

    return RecursiveHighlighter;

  })();

}).call(this);
