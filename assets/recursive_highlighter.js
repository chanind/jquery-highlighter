// Generated by CoffeeScript 1.4.0
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function($) {
    var findOrCreateHighlighter;
    window.RecursiveHighlighter = (function() {

      RecursiveHighlighter.prototype.options = {
        highlightClass: 'highlight',
        highlightTag: 'span'
      };

      function RecursiveHighlighter(target, options) {
        if (options == null) {
          options = {};
        }
        this.$el = $(target);
        this.options = $.extend(this.options, options);
      }

      RecursiveHighlighter.prototype.containsSelection = function() {
        var $end, $start, containsEnd, containsStart, range;
        if (!this.selectionExists()) {
          return false;
        }
        range = this.getRange();
        $start = $(range.startContainer);
        $end = $(range.endContainer);
        containsStart = $start.parents().toArray().indexOf(this.$el[0]) !== -1;
        containsEnd = $end.parents().toArray().indexOf(this.$el[0]) !== -1;
        return containsStart && containsEnd;
      };

      RecursiveHighlighter.prototype.markHighlight = function(relativeBounds) {
        var domTree, highlightEl, highlights, hlEnd, hlRange, hlStart, inserting, node, nodeEnd, nodeHlEnd, nodeHlStart, nodeLength, nodeRange, nodeStart, _i, _j, _k, _len, _results, _results1;
        domTree = this.getFlattenedDomTree();
        hlStart = relativeBounds[0];
        hlEnd = relativeBounds[1];
        hlRange = (function() {
          _results = [];
          for (var _i = hlStart; hlStart <= hlEnd ? _i <= hlEnd : _i >= hlEnd; hlStart <= hlEnd ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        inserting = false;
        nodeStart = 0;
        highlights = [];
        for (_j = 0, _len = domTree.length; _j < _len; _j++) {
          node = domTree[_j];
          nodeLength = $(node).text().length;
          nodeEnd = nodeLength + nodeStart;
          nodeRange = (function() {
            _results1 = [];
            for (var _k = nodeStart; nodeStart <= nodeEnd ? _k <= nodeEnd : _k >= nodeEnd; nodeStart <= nodeEnd ? _k++ : _k--){ _results1.push(_k); }
            return _results1;
          }).apply(this);
          if (__indexOf.call(hlRange, nodeStart) >= 0 || __indexOf.call(hlRange, nodeEnd) >= 0 || __indexOf.call(nodeRange, hlStart) >= 0 || __indexOf.call(nodeRange, hlEnd) >= 0) {
            nodeHlStart = Math.max(hlStart - nodeStart, 0);
            nodeHlEnd = Math.min(hlEnd - nodeStart, nodeLength);
            highlightEl = this.highlightInNode(node, [nodeHlStart, nodeHlEnd]);
            if (highlightEl) {
              highlights.push(highlightEl);
            }
          }
          nodeStart = nodeEnd;
        }
        return $(highlights);
      };

      RecursiveHighlighter.prototype.selectionExists = function() {
        if (this.getRange()) {
          return true;
        } else {
          return false;
        }
      };

      RecursiveHighlighter.prototype.getRange = function() {
        var selection;
        if (window.getSelection) {
          selection = window.getSelection();
          if (selection.rangeCount > 0) {
            return selection.getRangeAt(0);
          } else {
            return false;
          }
        } else if (document.selection) {
          return document.selection.createRange();
        }
      };

      RecursiveHighlighter.prototype.getRelativeSelectionBounds = function() {
        var $end, endOffset, range, startOffset;
        if (!this.containsSelection()) {
          return false;
        }
        range = this.getRange();
        $end = $(range.endContainer);
        startOffset = this.getNumCharactersUntil(range.startContainer) + range.startOffset;
        endOffset = this.getNumCharactersUntil(range.endContainer) + range.endOffset;
        return [startOffset, endOffset];
      };

      RecursiveHighlighter.prototype.getNumCharactersUntil = function(elm) {
        var numChars, success, _ref;
        _ref = this.recurseGetNumCharsUntil(this.$el, elm), numChars = _ref[0], success = _ref[1];
        return success && numChars;
      };

      RecursiveHighlighter.prototype.getFlattenedDomTree = function() {
        return this.recurseGetFlattenedDomTree([], this.$el);
      };

      RecursiveHighlighter.prototype.recurseGetFlattenedDomTree = function(previousFlattenedTree, currentNode) {
        var $currentNode, child, children, flattenedTree, _i, _len, _ref;
        flattenedTree = previousFlattenedTree.slice();
        $currentNode = $(currentNode);
        children = $currentNode.contents();
        if (children.length > 0) {
          _ref = children.toArray();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            flattenedTree = this.recurseGetFlattenedDomTree(flattenedTree, child);
          }
        } else {
          flattenedTree.push($currentNode[0]);
        }
        return flattenedTree;
      };

      RecursiveHighlighter.prototype.recurseGetNumCharsUntil = function(root, elm) {
        var $elm, $root, charOffset, child, children, found, numChars, _i, _len, _ref, _ref1;
        numChars = 0;
        $elm = $(elm);
        $root = $(root);
        if ($root[0] === $elm[0]) {
          return [0, true];
        } else {
          children = $root.contents();
          if (children.length > 0) {
            _ref = children.toArray();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              child = _ref[_i];
              _ref1 = this.recurseGetNumCharsUntil(child, elm), charOffset = _ref1[0], found = _ref1[1];
              numChars += charOffset;
              if (found) {
                return [numChars, true];
              }
            }
          } else {
            return [$root.text().length, false];
          }
        }
        return [numChars, false];
      };

      RecursiveHighlighter.prototype.highlightInNode = function(node, bounds) {
        var $node, $nodes, $parent, $tempDiv, content, highlights;
        if (bounds[0] === bounds[1]) {
          return;
        }
        $node = $(node);
        content = $node.text();
        content = this.htmlEscape(content.slice(0, bounds[0])) + this.getHlStartTag() + this.htmlEscape(content.slice(bounds[0], bounds[1])) + this.getHlEndTag() + this.htmlEscape(content.slice(bounds[1]));
        if ($node[0].nodeType === 3) {
          $tempDiv = $('<div/>');
          $tempDiv.html(content);
          $nodes = $tempDiv.contents();
          $node.replaceWith($nodes);
        } else {
          $parent = $node.parent();
          $parent.html(content);
          $nodes = $parent.contents();
        }
        highlights = $nodes.filter(function(i, node) {
          return node.nodeType !== 3;
        });
        return highlights[0];
      };

      RecursiveHighlighter.prototype.getHlStartTag = function() {
        return "<" + this.options.highlightTag + " class='" + this.options.highlightClass + "'>";
      };

      RecursiveHighlighter.prototype.getHlEndTag = function() {
        return "</" + this.options.highlightTag + ">";
      };

      RecursiveHighlighter.prototype.htmlEscape = function(str) {
        return ("" + str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;").replace(/\//g, "&#x2F;");
      };

      return RecursiveHighlighter;

    })();
    findOrCreateHighlighter = function(elm, options, forceRecreate) {
      var highlighter;
      if (forceRecreate == null) {
        forceRecreate = false;
      }
      highlighter = $.data(elm, 'plugin_recursive_highlighter');
      if (forceRecreate || !highlighter) {
        highlighter = new RecursiveHighlighter(elm, options);
      }
      $.data(elm, 'plugin_recursive_highlighter', highlighter);
      return highlighter;
    };
    return $.fn.highlighter = function() {
      var args, command, highlighter, lastArg, options;
      args = Array.prototype.slice.apply(arguments);
      lastArg = args[args.length - 1];
      if (!(typeof lastArg === 'string' || $.isArray(lastArg))) {
        options = lastArg;
      }
      options || (options = {});
      if (typeof args[0] === "string") {
        highlighter = findOrCreateHighlighter(this, options);
        command = args[0];
        return highlighter[command].apply(highlighter, args.slice(1));
      } else {
        return findOrCreateHighlighter(this, options, true);
      }
    };
  })(jQuery);

}).call(this);
